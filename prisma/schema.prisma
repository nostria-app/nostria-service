generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                        String           @id
  pubkey                    String           @unique
  username                  String?          @unique
  tier                      String
  expires                   BigInt?
  created                   BigInt
  modified                  BigInt
  lastLoginDate             BigInt?
  subscription              Json
  backupJobs                BackupJob[]
  notificationLogs          NotificationLog[]

  @@map("accounts")
}

model BackupJob {
  id           String  @id @default(uuid())
  pubkey       String
  status       String
  backupType   String
  requested    BigInt
  scheduled    BigInt?
  started      BigInt?
  completed    BigInt?
  errorMessage String?
  resultUrl    String?
  expires      BigInt?
  metadata     Json?
  account      Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)

  @@index([pubkey])
  @@index([status])
  @@map("backup_jobs")
}

model NotificationLog {
  id       String  @id @default(uuid())
  pubkey   String
  title    String?
  body     String?
  content  String?
  template String?
  created  BigInt
  modified BigInt
  account  Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)

  @@index([pubkey])
  @@index([created])
  @@map("notification_logs")
}

model NotificationSettings {
  id       String  @id
  pubkey   String  @unique
  enabled  Boolean
  filters  Json?
  settings Json?
  created  BigInt
  modified BigInt

  @@map("notification_settings")
}

model NotificationSubscription {
  id           String  @id
  pubkey       String
  subscription Json
  deviceKey    String
  created      BigInt
  modified     BigInt

  @@unique([pubkey, deviceKey])
  @@index([pubkey])
  @@map("notification_subscriptions")
}

model Payment {
  id           String  @id @default(uuid())
  paymentType  String
  lnHash       String
  lnInvoice    String
  lnAmountSat  Int
  tier         String
  billingCycle String
  priceCents   Int
  isPaid       Boolean
  paid         BigInt?
  expires      BigInt
  pubkey       String
  created      BigInt
  modified     BigInt

  @@index([pubkey])
  @@index([lnHash])
  @@index([isPaid])
  @@index([expires])
  @@map("payments")
}

model UserSettings {
  id             String  @id
  pubkey         String  @unique
  releaseChannel String
  socialSharing  Boolean
  created        BigInt
  modified       BigInt

  @@map("user_settings")
}
