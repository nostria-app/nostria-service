// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account model - corresponds to the Account interface
model Account {
  id             String   @id // pubkey as primary key
  pubkey         String   @unique
  username       String?  @unique
  tier           String   // 'free', 'premium', 'premium_plus'
  expires        BigInt?  // Optional expiry timestamp
  created        BigInt   // Creation timestamp
  modified       BigInt   // Modification timestamp
  lastLoginDate  BigInt?  // Last login timestamp
  
  // Subscription details stored as JSON
  subscription   Json     // AccountSubscription object
  
  // Relations
  backupJobs              BackupJob[]
  notificationLogs        NotificationLog[]
  notificationSettings    NotificationSettings[]
  notificationSubscriptions NotificationSubscription[]
  payments                Payment[]
  userSettings            UserSettings[]
  
  @@map("accounts")
}

// BackupJob model - corresponds to the BackupJob interface  
model BackupJob {
  id           String   @id @default(uuid())
  pubkey       String
  status       String   // BackupJobStatus enum
  backupType   String   // BackupType enum
  requested    BigInt   // Timestamp when requested
  scheduled    BigInt?  // Optional scheduled timestamp
  started      BigInt?  // Optional start timestamp
  completed    BigInt?  // Optional completion timestamp
  errorMessage String?
  resultUrl    String?  // Download URL
  expires      BigInt?  // Download link expiry
  metadata     Json?    // Optional metadata object
  
  // Relations
  account      Account  @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)
  
  @@map("backup_jobs")
  @@index([pubkey])
  @@index([status])
}

// NotificationLog model - corresponds to the NotificationLog interface
model NotificationLog {
  id        String  @id @default(uuid())
  pubkey    String
  title     String?
  body      String?
  content   String?
  template  String?
  created   BigInt
  modified  BigInt
  
  // Relations
  account   Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)
  
  @@map("notification_logs")
  @@index([pubkey])
  @@index([created])
}

// NotificationSettings model - corresponds to the NotificationSettings interface
model NotificationSettings {
  id       String  @id // Will be "notification-settings-" + pubkey
  pubkey   String  @unique
  enabled  Boolean
  filters  Json?   // Custom filters for premium users
  settings Json?   // Additional settings
  created  BigInt
  modified BigInt
  
  // Relations
  account  Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)
  
  @@map("notification_settings")
}

// NotificationSubscription model - corresponds to the NotificationSubscription interface
model NotificationSubscription {
  id           String @id // Combination of pubkey and device key (p256dh)
  pubkey       String
  subscription Json   // PushSubscription object
  deviceKey    String // p256dh key used as unique identifier
  created      BigInt
  modified     BigInt
  
  // Relations
  account      Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)
  
  @@map("notification_subscriptions")
  @@index([pubkey])
  @@unique([pubkey, deviceKey])
}

// Payment model - corresponds to the Payment interface
model Payment {
  id           String  @id @default(uuid())
  paymentType  String  // 'ln' for lightning
  lnHash       String
  lnInvoice    String
  lnAmountSat  Int
  tier         String  // Tier being purchased
  billingCycle String  // BillingCycle
  priceCents   Int
  isPaid       Boolean
  paid         BigInt? // Payment timestamp
  expires      BigInt  // Invoice expiry
  pubkey       String
  created      BigInt
  modified     BigInt
  
  // Relations
  account      Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)
  
  @@map("payments")
  @@index([pubkey])
  @@index([lnHash])
  @@index([isPaid])
  @@index([expires])
}

// UserSettings model - corresponds to the UserSettings interface
model UserSettings {
  id             String  @id // Will be "user-settings-" + pubkey  
  pubkey         String  @unique
  releaseChannel String  // 'stable', 'beta', 'alpha'
  socialSharing  Boolean
  created        BigInt
  modified       BigInt
  
  // Relations
  account        Account @relation(fields: [pubkey], references: [pubkey], onDelete: Cascade)
  
  @@map("user_settings")
}
